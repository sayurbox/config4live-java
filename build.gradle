plugins {
    id 'java-library'
    id 'com.google.protobuf' version '0.8.8'
}

group 'com.sayurbox.config4live'
version '1.1.1'

apply plugin: 'jacoco'

java {
    withSourcesJar()
}

def mainClassName = "com.sayurbox.config4live.ConfigurationProvider"
jar {
    manifest {
        attributes "Main-Class": "$mainClassName"
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    maven {
        url "https://maven-central.storage-download.googleapis.com/maven2/"
    }
    mavenCentral()
}

def grpcVersion = '1.32.1'
def protobufVersion = '3.12.0'
def protocVersion = '3.12.0'

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    implementation "org.slf4j:slf4j-api:1.7.25"
    implementation "com.squareup.okhttp3:okhttp:3.14.6"
    implementation "com.squareup.okhttp3:logging-interceptor:3.14.6"

    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    implementation "io.github.resilience4j:resilience4j-circuitbreaker:1.7.1"
    implementation ("io.github.resilience4j:resilience4j-all:1.7.1") {
        exclude group: 'io.github.resilience4j', module: 'resilience4j-cache'
        exclude group: 'io.github.resilience4j', module: 'resilience4j-retry'
        exclude group: 'io.github.resilience4j', module: 'resilience4j-ratelimiter'
        exclude group: 'io.github.resilience4j', module: 'resilience4j-timelimiter'
    }

    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation "org.mockito:mockito-core:2.28.2"
    testImplementation "org.powermock:powermock-api-mockito2:2.0.5"
    testImplementation "org.powermock:powermock-module-junit4:2.0.5"
    testImplementation("com.squareup.okhttp3:mockwebserver:3.14.6")
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }

        proto {
            srcDir 'src/main/proto'
        }

    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        html.enabled true
    }
    afterEvaluate {
        // exclude generated proto
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/LiveConfigurationGrpc**',
                    '**/LiveConfigurationProto**',
                    '**/ConfigRequest**',
                    '**/ConfigResponse**'
            ])
        }))
    }
}

check.dependsOn jacocoTestReport

